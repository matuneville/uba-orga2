checkpoint 1:
    a) Dos niveles de privilegio: Supervisor, o kernel (0) y usuario (1).
    
    b) Vamos por pasos:
        1- Tenemos un Logical Address que tiene un offset de 32b y un Segment Selector de 16b.
        
        2- Con el Segment Selector, podemos acceder al Segment Descriptor para tomar la base del segmento y, sumandole el offset previo, accedemos a la Linear Address (como tambien tenemos el segment limit sabemos si el offset es correcto)

        3- Con la Linear Address, tenemos:
            
            A. Bits 22 a 31: Dir
            B. Bits 12 a 21: Table
            C. Bits  0 a 11: Offset

            Para el Page Directory, tenemos el CR3 (que se va actualizando según la tarea actual) que tiene su dirección de base. En dicha base, utilizamos A para obtener el Entry a la base de la Page Table. Accedemos a esta (PDE) que nos dirá la dirección fisica de la Page Table (PT), utilizamos B para obtener el Entry (PTE) en la base de la página en el Physical Address Space. A esta base le sumamos finalmente C, y en dicha localización fisica estará almacenada la informacion buscada.

            
    c) Los atributos de la PTE son:
        - El bit D(dirty) es seteado por unidad de memoria del procesador cuando se escribe en la pagina, se limpia por soft.
        - El bit A(accessed) es seteado por unidad de memoria del procesador cuando se escribe o lee en la pagina, se limpia por soft.
        - El PCD (cache disabled) hace que la pagina no se almacene en memoria rapida.
        - PWT (write through) hace que al escribir la escritura se refleje en cache y memoria a la vez, sino solo se actualiza la memoria cuando se desaloja la linea de cache.
        - U/S indica si la página puede ser accedida por el espacio de usuario (bit en 1) o solo supervisor/kernel (bit en 0).
        - R/W indica si la pagina puede leerse y escribirse (bit en 1) o solo leerse (bit en 0).
        - P indica si la pagina se encuentra cargada en memoria o no.


    d) Leer la tabla de combinacion de atributos de Page-Dir Entry y Page-Table Entry
                             
    
    e) Son 5 páginas:
        - 2 pages para la tarea
        - 1 pages la pila 
        - 1 para la Page Directory
        - 1 para la Page Table


    g) El Translation Lookaside Buffer (TLB) es una memoria caché administrada por la unidad de gestión de memoria (MMU), que contiene partes de la tabla de paginación, la cual relaciona las direcciones lógicas con las físicas. Se utiliza para obtener la traducción rápida de direcciones.

    Cuando se introducen modificaciones en las estructuras de paginación, es necesario purgar el TLB (tlbflush) para asegurar que las entradas en el TLB estén sincronizadas con los cambios realizados en la tabla de paginación. Si no se purga el TLB, podría contener entradas obsoletas o incorrectas que ya no corresponden a la tabla de paginación actualizada, lo que podría llevar a errores en la traducción de direcciones.

    Cada entrada en el TLB tiene varios atributos. Aunque estos pueden variar dependiendo del sistema, generalmente incluyen la dirección virtual, la dirección física correspondiente y bits de estado como bits de validez y bits de protección de acceso.

    Al desalojar una entrada específica del TLB, la entrada correspondiente en la tabla de paginación original no se ve afectada. Esto se debe a que el TLB es simplemente una caché de la tabla de paginación y no tiene ninguna influencia sobre la tabla de paginación en sí. Sin embargo, si la entrada desalojada del TLB se necesita nuevamente, la MMU tendrá que buscar la entrada correspondiente en la tabla de paginación, lo que puede llevar más tiempo.

    checkpoint 3

    b) ¿Por qué es necesario mapear y desmapear las páginas de destino y fuente? En un sistema operativo con paginación, las direcciones físicas no se pueden acceder directamente desde el código del kernel. En su lugar, se accede a través de direcciones virtuales que se mapean a direcciones físicas. Por lo tanto, necesitamos mapear las direcciones físicas de las páginas de origen y destino a direcciones virtuales para poder copiar los datos. Después de la copia, desmapeamos las páginas para liberar las direcciones virtuales para su reutilización.

    ¿Qué función cumplen SRC_VIRT_PAGE y DST_VIRT_PAGE? SRC_VIRT_PAGE y DST_VIRT_PAGE son direcciones virtuales temporales utilizadas para mapear las páginas de origen y destino durante la copia. Estas constantes deben definirse en algún lugar fuera de esta función.

    ¿Por qué es necesario obtener el CR3 con rcr3()? CR3 es el registro que contiene la dirección de la tabla de páginas de nivel superior en uso actualmente. Necesitamos obtener CR3 para saber en qué tabla de páginas realizar el mapeo y desmapeo.