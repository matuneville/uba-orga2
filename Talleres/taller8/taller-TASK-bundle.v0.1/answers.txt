1. Si queremos definir un sistema que utilice sólo dos tareas, ¿Qué nuevas estructuras, cantidad de
nuevas entradas en las estructuras ya definidas, y registros tenemos que configurar?¿Qué formato
tienen? ¿Dónde se encuentran almacenadas?

    Debemos configurar una TSS por tarea, que se dice que guarda una "foto" de ejecucion de tarea
    La cantidad de entradas en las estructuras sera solo la entrada en la GDT por cada tarea (selector de segmento de TSS)
    El registro TR (que indica la base de la TSS de la tarea actual)

2. ¿A qué llamamos cambio de contexto?¿Cuándo se produce?¿Qué efecto tiene sobre los registros
del procesador? Expliquen en sus palabras que almacena el registro TR y cómo obtiene la
información necesaria para ejecutar una tarea después de un cambio de contexto.

    Referido a guardarse el estado de una tarea en ejecucion (registros, segmentos, etc) para que cuando se pase a otra tarea, podamos luego retomar la anterior con su contexto guardado

    El registro TR almacena el selector de segmento de la tarea que se estaba ejecutando. Para obtener la info necesaria para ejecutar la tarea luego de un cambio de contexto, nos da la direccion de la TSS, que es donde esta el contexto de la tarea.

3. Al momento de realizar un cambio de contexto el procesador va almacenar el estado actual de
acuerdo al selector indicado en el registro TR y ha de restaurar aquel almacenado en la TSS cuyo
selector se asigna en el jmp far. ¿Qué consideraciones deberíamos tener para poder realizar el
primer cambio de contexto? ¿Y cuáles cuando no tenemos tareas que ejecutar o se encuentran
todas suspendidas?

    Necesitamos definir dos tareas especiales: la tarea Inicial y la tarea Idle para estas situaciones. Ademas, definiremos aquellas tareas de usuario y/o de kernel que se precisan para que nuestro sistema brinde servicios o haga lo que esperamos.

    Necesitamos dos pasos para dejar al kernel listo para ejecutar las tareas que querramos:

        1. Apenas inicia el kernel hay que cargar la tarea Inicial. Para hacerlo, vamos a usar la instruccion LTR que toma como parametro un registro de 16 bits con el selector de la tarea en la GDT.
        LDTR ax ; (con ax = selector segmento tarea inicial)

        2. Luego, hay que saltar a la tarea Idle. La forma de hacerlo es saltar al selector con un JMP y el valor que pongamos en offset es ignorado (podemos poner 0).
        JMP SELECTOR TAREA IDLE:0

    Esto va a cambiar el valor del registro TR apuntando a la TSS de la tarea Idle y producir el cambio de contexto. Saltar a una tarea es algo que lo va a hacer el Sistema Operativo en nivel 0. 

4. ¿Qué hace el scheduler de un Sistema Operativo? ¿A qué nos referimos con que usa una política?

    El Scheduler utiliza una polıtica o criterio para decir cual es la proxima tarea a ejecutar y lo hace en cada tic del reloj. Cada vez que se pasa de una tarea a otra ocurre un Cambio de Contexto

5. En un sistema de una única CPU, ¿cómo se hace para que los programas parezcan ejecutarse en simultáneo?

    Se hacen los cambios de tarea muy rapido, de ese modo da la impresion de que se ejecutan en simultaneo



11.
    global _isr32
        _isr32:
        pushad                  // pushea los registros generales a la pila
        call pic_finish1        // indica al PIC que ya se leyo la interrupcion

        call sched_next_task    // llama a la funcion que determina cual sera la proxima tarea a ejecutar
        
        str cx                  // almacena el selector de segmento de tarea actual en el registro cx.
        cmp ax, cx              // compara el selector de la proxima tarea (ax) con el de la tarea actual (cx)
        je .fin                 // si la proxima tarea es la misma que la actual, termina
        
        mov word [sched_task_selector], ax    // almacena el selector de la próxima tarea en sched_task_selector
        jmp far [sched_task_offset]          // salta al segmento indicado
        
        .fin: 
        popad           // Restaura todos los registros generales desde la pila
        iret            // Retorna de la interrupción, restaurando el estado del procesador a como estaba antes de la interrupción



    b) La instrucción jmp far [sched_task_offset] realiza un salto lejano a la dirección almacenada en sched_task_offset.
    
    En un sistema de 32 bits, esta dirección sería de 48 bits, compuesta por un selector de segmento de 16 bits y un offset de 32 bits.
    sched_task_offset: dd 0xFFFFFFFF   -> 32 bits
    sched_task_selector: dw 0xFFFF     -> 16 bits
    
    El selector de segmento indica el segmento de memoria al que se va a acceder, y el offset indica la posición dentro de ese segmento. El offset elegido tiene el efecto de determinar exactamente a qué punto del código se saltará.

    c) Cuando una tarea vuelve a ser puesta en ejecución, la ejecución regresa al punto donde la tarea fue interrumpida por última vez. Esto se debe a que el estado de la tarea, incluyendo el registro EIP, se guarda cuando la tarea es interrumpida y se restaura cuando la tarea es reanudada. Por lo tanto, la tarea continúa exactamente donde lo dejó.


14.
    a) La función tss_gdt_entry_for_task está creando una entrada en la Tabla Global de Descriptores (GDT) para la tarea especificada. Esta entrada en la GDT proporciona la información necesaria para que el procesador pueda cambiar a esta tarea cuando sea necesario.

    b) El desplazamiento a la izquierda de gdt_id se realiza para convertir el índice de la GDT en un selector de segmento. En el modelo de memoria protegida de x86, los selectores de segmento son índices en la GDT, pero están desplazados a la izquierda 3 bits para dejar espacio para los bits de privilegio y tipo. Por lo tanto, gdt_id << 3 convierte el índice de la GDT en un selector de segmento adecuado para ser utilizado en las operaciones de cambio de tarea.